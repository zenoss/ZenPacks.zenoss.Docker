name: ZenPacks.zenoss.Docker

zProperties:
  DEFAULTS:
    category: Docker

  zDockerMonitorContainerStats:
    type: boolean
    default: true

  zDockerMonitorContainerStatus:
    type: boolean
    default: false

  zDockerMonitorContainerSize:
    type: boolean
    default: false


device_classes:
  /:
    templates:
      DockerContainer-Stats:
        description: "Docker container statistics monitoring using cgroupfs via SSH."
        targetPythonClass: ZenPacks.zenoss.Docker.DockerContainer

        datasources:
          cpuacct:
            type: COMMAND
            usessh: true
            commandTemplate: '/usr/bin/env sudo find ${here/cgroup_path}/cpuacct/ -printf "\n%p\n" -exec cat {} 2>/dev/null \;'
            parser: ZenPacks.zenoss.Docker.parsers.cgroupfs
            component: ${here/id}
            eventClass: /Ignore
            severity: Clear

            datapoints:
              usage:
                rrdtype: DERIVE
                rrdmin: 0
                aliases:
                  cpu__ticks: ""

              usage_user:
                rrdtype: DERIVE
                rrdmin: 0
                aliases:
                  cpu_user__ticks: ""

              usage_system:
                rrdtype: DERIVE
                rrdmin: 0
                aliases:
                  cpu_system__ticks: ""

              processes: GAUGE_MIN_0

              # More details we could get. Probably overkill.
              # cpus: GAUGE_MIN_0
              # usage_percpu_avg: DERIVE_MIN_0
              # usage_percpu_max: DERIVE_MIN_0

          memory:
            type: COMMAND
            usessh: true
            commandTemplate: '/usr/bin/env sudo find ${here/cgroup_path}/memory/ -printf "\n%p\n" -exec cat {} 2>/dev/null \;'
            parser: ZenPacks.zenoss.Docker.parsers.cgroupfs
            component: ${here/id}
            eventClass: /Ignore
            severity: Clear

            datapoints:
              limit: GAUGE_MIN_0

              usage:
                rrdmin: 0
                aliases:
                  mem_usage__bytes: ""


              # More details we could get. Probably overkill.
              # max_usage: GAUGE_MIN_0
              # memsw_limit: GAUGE_MIN_0
              # memsw_usage: GAUGE_MIN_0
              # memsw_max_usage: GAUGE_MIN_0
              # cache: GAUGE_MIN_0
              # rss: GAUGE_MIN_0
              # rss_huge: GAUGE_MIN_0
              # mapped_file: GAUGE_MIN_0
              # swap: GAUGE_MIN_0
              # pgpgin: DERIVE_MIN_0
              # pgpgout: DERIVE_MIN_0
              # pgfault: DERIVE_MIN_0
              # pgmajfault: DERIVE_MIN_0
              # inactive_anon: GAUGE_MIN_0
              # active_anon: GAUGE_MIN_0
              # inactive_file: GAUGE_MIN_0
              # active_file: GAUGE_MIN_0
              # unevictable: GAUGE_MIN_0

          blkio:
            type: COMMAND
            usessh: true
            commandTemplate: '/usr/bin/env sudo find ${here/cgroup_path}/blkio/ -printf "\n%p\n" -exec cat {} 2>/dev/null \;'
            parser: ZenPacks.zenoss.Docker.parsers.cgroupfs
            component: ${here/id}
            eventClass: /Ignore
            severity: Clear

            datapoints:
              bytes_total: DERIVE_MIN_0
              bytes_read: DERIVE_MIN_0
              bytes_write: DERIVE_MIN_0
              io_total: DERIVE_MIN_0
              io_read: DERIVE_MIN_0
              io_write: DERIVE_MIN_0

              # More details we could get. Probably overkill.
              # devices: GAUGE_MIN_0
              # service_time: DERIVE_MIN_0
              # service_time_max: DERIVE_MIN_0
              # io_queued: GAUGE_MIN_0
              # time: DERIVE_MIN_0
              # time_max: DERIVE_MIN_0
              # wait_time: DERIVE_MIN_0
              # wait_time_max: DERIVE_MIN_0
              # sectors: DERIVE_MIN_0
              # bytes_sync: DERIVE_MIN_0
              # bytes_async: DERIVE_MIN_0
              # io_sync: DERIVE_MIN_0
              # io_async: DERIVE_MIN_0
              # io_merged: DERIVE_MIN_0

        graphs:
          CPU Usage:
            units: percent
            miny: 0
            maxy: 100

            graphpoints:
              Total:
                dpName: cpuacct_usage
                format: "%7.2lf%%"

              User:
                dpName: cpuacct_usage_user
                format: "%7.2lf%%"

              System:
                dpName: cpuacct_usage_system
                format: "%7.2lf%%"

          Memory Usage:
            units: bytes
            miny: 0
            base: true

            graphpoints:
              Limit:
                dpName: memory_limit
                format: "%7.2lf%s"

              Used:
                dpName: memory_usage
                format: "%7.2lf%s"

          IO Rate:
            units: operations/sec
            miny: 0

            graphpoints:
              Total:
                dpName: blkio_io_total
                format: "%7.2lf%s"

              Read:
                dpName: blkio_io_read
                format: "%7.2lf%s"

              Write:
                dpName: blkio_io_write
                format: "%7.2lf%s"

          IO Throughput:
            units: bytes/sec
            miny: 0
            base: true

            graphpoints:
              Total:
                dpName: blkio_bytes_total
                format: "%7.2lf%s"

              Read:
                dpName: blkio_bytes_read
                format: "%7.2lf%s"

              Write:
                dpName: blkio_bytes_write
                format: "%7.2lf%s"

      DockerContainer-Status:
        description: "Docker container status monitoring using \"docker ps\" via SSH."
        targetPythonClass: ZenPacks.zenoss.Docker.DockerContainer

        datasources:
          status:
            type: COMMAND
            usessh: true
            commandTemplate: '/usr/bin/env sudo docker ps -a --no-trunc 2>/dev/null'
            parser: ZenPacks.zenoss.Docker.parsers.ps
            component: ${here/id}
            eventClass: /Ignore
            severity: Clear
            cycletime: 60

      DockerContainer-Size:
        description: "Docker container size monitoring using \"docker ps -s\" via SSH."
        targetPythonClass: ZenPacks.zenoss.Docker.DockerContainer

        datasources:
          size:
            type: COMMAND
            usessh: true
            commandTemplate: '/usr/bin/env sudo docker ps -a -s --no-trunc 2>/dev/null'
            parser: ZenPacks.zenoss.Docker.parsers.ps
            component: ${here/id}
            eventClass: /Ignore
            severity: Clear
            cycletime: 600

            datapoints:
              size: GAUGE_MIN_0
              size_virtual: GAUGE_MIN_0

        graphs:
          Storage Usage:
            units: bytes
            miny: 0
            base: true

            graphpoints:
              Size:
                dpName: size_size
                format: "%7.2lf%s"

              Virtual Size:
                dpName: size_size_virtual
                format: "%7.2lf%s"


classes:
  DockerContainer:
    base: [zenpacklib.Component]
    label: Docker Container
    order: 1

    properties:
      image:
        label: Image
        order: 4.01

      command:
        label: Command
        order: 4.02

      created:
        label: Created
        order: 4.03

      ports:
        label: Ports
        order: 4.04

      cgroup_path:
        label: CGroup Path
        order: 4.05
        default: /sys/fs/cgroup

    monitoring_templates:
      - DockerContainer
      - DockerContainer-Status
      - DockerContainer-Stats
      - DockerContainer-Size

    dynamicview_group: Docker Containers
    dynamicview_views: [service_view]
    dynamicview_weight: 35
    dynamicview_relations:
      impacted_by:
        - docker_host

class_relationships:
  - Products.ZenModel.Device.Device(docker_containers) 1:MC (docker_host)DockerContainer
